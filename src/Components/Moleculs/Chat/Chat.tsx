import React, { LegacyRef, MutableRefObject, ReactNode, Ref, RefObject, useEffect, useRef, useState } from 'react';import { connect } from 'react-redux';import cn from 'classnames';import { v4 as uuidv4 } from 'uuid';import { socket } from '../../../socket/socket';import { IDataSocket, IInitialStateSocket } from '../../../store/socketData/typeSocketData';import { socketActions } from '../../../store/socketData/actions';import Input from '../../Atoms/Input/Input';import Button from '../../Atoms/Button/Button';import classes from './chat.module.css';interface IChatProps {  data: IDataSocket[] | [],  messageSocket: any,  getMessageSocket: any}const Chat = ({ data, messageSocket, getMessageSocket }: IChatProps) => {  const [isOpen, setIsOpen] = useState(false);  const [value, setValue] = useState('');  const lastItem = useRef() as MutableRefObject<HTMLDivElement>;  const handleOpen = () => {    setIsOpen(!isOpen);  };  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {    setValue(e.target.value);  };  const handleClick = (e: React.FormEvent<HTMLFormElement>) => {    e.preventDefault();    value && messageSocket(value);    setValue('');    if (lastItem.current) {      lastItem.current.scrollIntoView({ behavior: 'smooth' });    }  };  useEffect(() => {    socket.on('message_get', (val) => {      console.log('value ---dsf---->', val);      getMessageSocket(val);    });  }, []);  console.log('data ------->', data);  return (    <div className={classes.container}>      <div onClick={handleOpen} className={classes.header}></div>      <div className={cn(classes.chat, { [classes.containerClose]: !isOpen }, { [classes.containerOpen]: isOpen })}>        <div className={classes.containerMessages}>          {            data[0] && data.map((item, index) => (              <div key={uuidv4()}                   className={cn(socket.id !== data[index].id ? classes.item : classes.float, classes.messages)}                   tabIndex={0}              >                {item?.message}              </div>            ))          }          <div className={classes.lastElem} ref={lastItem} />        </div>        <form onSubmit={handleClick}              className={cn(classes.inputContainer, { [classes.containerInputClose]: !isOpen }, { [classes.containerInputOpen]: isOpen })}>          <Input value={value} handleChange={handleChange} type={'text'} customStyle={classes.input} />          <Button customStyle={classes.button}                  text={'send'} />        </form>      </div>    </div>  );};interface IProps {  dataSocket: IInitialStateSocket;}const mapStateToProps = ({ dataSocket }: IProps) => {  return {    data: dataSocket.dataSocket  };};const mapDispatchToProps = () => {  return {    messageSocket: socketActions.socketDataAction,    getMessageSocket: socketActions.getSocketDataAction  };};export default connect(mapStateToProps, mapDispatchToProps())(Chat);